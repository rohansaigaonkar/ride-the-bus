{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/rohan/Documents/RTB/ride-the-bus/src/components/FetchCard.js\";\nimport React, { Component } from 'react';\nimport Card from \"./Card\";\nimport AnswerSection from \"./AnswerSection\";\nimport { getColor } from \"./utils/CardHelper\";\n/**\n * This component handles the drawing a new card. It is responsible which step the user is on\n * As well as checking if their guess was correct.\n *\n * @param drawCard\n * @returns {JSX.Element}\n * @constructor\n */\n\nclass FetchCard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchCard = async () => {\n      const url = `https://deckofcardsapi.com/api/deck/${this.props.deckId}/draw?count=1`;\n      const response = await fetch(url);\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n      /** Logs the response */\n\n\n      console.log(body);\n      return body;\n    };\n\n    this.state = {\n      step: 0,\n      loading: true,\n      cards: []\n    };\n    this.handleDraw = this.handleDraw.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n    this.clickHandler = this.clickHandler.bind(this);\n    this.handleCorrect = this.handleCorrect.bind(this);\n    this.handleIncorrect = this.handleCorrect.bind(this);\n  }\n\n  handleDraw() {\n    console.log(\"Drawing Card\");\n    this.fetchCard().then(res => this.setState({\n      step: this.state.step + 1,\n      loading: false,\n      cards: this.state.cards.concat(res.cards[0])\n    })).catch(err => console.log(err + \"wassap kiddo u dun goofed\"));\n  }\n\n  handleReset() {\n    this.setState({\n      step: 0,\n      loading: false,\n      cards: []\n    });\n  }\n\n  clickHandler(button) {\n    console.log(button);\n    this.handleDraw();\n    const step = this.state.step;\n    const currCard = this.state.cards[step - 1];\n\n    switch (this.state.step) {\n      case 0:\n        if (getColor(currCard.suit) === button) {\n          console.log(\"correct!\");\n        }\n\n    } // check if it is correct/incorrect -> check the step, then check what button they pressed\n    // 0 -> Color\n    // 1 -> High or Low\n    // 2 -> In between or outside\n    // 3 -> Suit\n    // if correct, then draw, else, reset.\n\n  }\n\n  handleCorrect() {}\n\n  handleIncorrect() {}\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.cards.map(card => /*#__PURE__*/_jsxDEV(Card, {\n          url: card.image,\n          children: card.image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 52\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AnswerSection, {\n        step: this.state.step,\n        clickHandler: this.clickHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default FetchCard;","map":{"version":3,"sources":["/Users/rohan/Documents/RTB/ride-the-bus/src/components/FetchCard.js"],"names":["React","Component","Card","AnswerSection","getColor","FetchCard","constructor","props","fetchCard","url","deckId","response","fetch","body","json","status","Error","message","console","log","state","step","loading","cards","handleDraw","bind","handleReset","clickHandler","handleCorrect","handleIncorrect","then","res","setState","concat","catch","err","button","currCard","suit","render","map","card","image"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Card from \"./Card\";\nimport AnswerSection from \"./AnswerSection\";\nimport {getColor} from \"./utils/CardHelper\";\n\n/**\n * This component handles the drawing a new card. It is responsible which step the user is on\n * As well as checking if their guess was correct.\n *\n * @param drawCard\n * @returns {JSX.Element}\n * @constructor\n */\nclass FetchCard extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            step: 0,\n            loading: true,\n            cards: []\n        }\n        this.handleDraw = this.handleDraw.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n        this.clickHandler = this.clickHandler.bind(this)\n        this.handleCorrect = this.handleCorrect.bind(this)\n        this.handleIncorrect = this.handleCorrect.bind(this)\n    }\n\n    handleDraw() {\n        console.log(\"Drawing Card\")\n        this.fetchCard()\n            .then(res => this.setState({\n                step: this.state.step + 1,\n                loading: false,\n                cards: this.state.cards.concat(res.cards[0])\n            })).catch(err => console.log(err + \"wassap kiddo u dun goofed\"))\n    }\n    fetchCard = async () => {\n        const url = `https://deckofcardsapi.com/api/deck/${this.props.deckId}/draw?count=1`\n        const response = await fetch(url)\n        const body = await response.json()\n\n        if (response.status !== 200) {\n            throw Error(body.message)\n        }\n\n        /** Logs the response */\n        console.log(body)\n        return body;\n    }\n\n    handleReset() {\n        this.setState({\n            step: 0,\n            loading: false,\n            cards: []\n        })\n    }\n\n    clickHandler(button) {\n        console.log(button)\n        this.handleDraw()\n        const step = this.state.step\n        const currCard = this.state.cards[step-1]\n        switch (this.state.step) {\n            case 0:\n                if (getColor(currCard.suit) === button) {\n                    console.log(\"correct!\")\n                }\n        }\n\n\n        // check if it is correct/incorrect -> check the step, then check what button they pressed\n        // 0 -> Color\n        // 1 -> High or Low\n        // 2 -> In between or outside\n        // 3 -> Suit\n        // if correct, then draw, else, reset.\n    }\n\n    handleCorrect() {\n\n    }\n\n    handleIncorrect() {\n\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={this.handleReset}>Reset</button>\n                <div>{this.state.cards.map(card => <Card url={card.image}>{card.image}</Card>)}</div>\n                <AnswerSection\n                    step={this.state.step}\n                    clickHandler={this.clickHandler}/>\n            </div>\n        );\n    }\n}\n\nexport default FetchCard;\n"]},"metadata":{},"sourceType":"module"}