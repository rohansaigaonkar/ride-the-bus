{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/rohan/Documents/RTB/ride-the-bus/src/components/FetchCard.js\";\nimport React, { Component } from 'react';\n/**\n * This component handles the drawing a new card. It is responsible which step the user is on\n * As well as checking if their guess was correct.\n *\n * @param drawCard\n * @returns {JSX.Element}\n * @constructor\n */\n\nclass FetchCard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchCard = async () => {\n      const url = `https://deckofcardsapi.com/api/deck/${this.props.deckId}/draw?count=1`;\n      const response = await fetch(url);\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n      /** Logs the response */\n\n\n      console.log(body);\n      return body;\n    };\n\n    this.state = {\n      step: 0,\n      loading: true,\n      cards: []\n    };\n    this.handleDraw = this.handleDraw.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n  }\n\n  handleDraw() {\n    console.log(\"Drawing Card\");\n    this.fetchCard().then(res => this.setState({\n      step: this.state.step + 1,\n      loading: false,\n      cards: this.state.cards.push(res)\n    })).catch(err => console.log(err));\n  }\n\n  handleReset() {\n    this.setState({\n      step: 0,\n      loading: false,\n      cards: []\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleDraw,\n        children: \"Draw\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: this.state.cards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default FetchCard;","map":{"version":3,"sources":["/Users/rohan/Documents/RTB/ride-the-bus/src/components/FetchCard.js"],"names":["React","Component","FetchCard","constructor","props","fetchCard","url","deckId","response","fetch","body","json","status","Error","message","console","log","state","step","loading","cards","handleDraw","bind","handleReset","then","res","setState","push","catch","err","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,SAAN,SAAwBD,SAAxB,CAAkC;AAC9BE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAoBnBC,SApBmB,GAoBP,YAAY;AACpB,YAAMC,GAAG,GAAI,uCAAsC,KAAKF,KAAL,CAAWG,MAAO,eAArE;AACA,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAD,CAA5B;AACA,YAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;;AAEA,UAAIH,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EAA6B;AACzB,cAAMC,KAAK,CAACH,IAAI,CAACI,OAAN,CAAX;AACH;AAED;;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACA,aAAOA,IAAP;AACH,KAhCkB;;AAEf,SAAKO,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,CADG;AAETC,MAAAA,OAAO,EAAE,IAFA;AAGTC,MAAAA,KAAK,EAAE;AAHE,KAAb;AAKA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACH;;AAEDD,EAAAA,UAAU,GAAG;AACTN,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,SAAKX,SAAL,GACKmB,IADL,CACUC,GAAG,IAAI,KAAKC,QAAL,CAAc;AACvBR,MAAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC,IAAX,GAAkB,CADD;AAEvBC,MAAAA,OAAO,EAAE,KAFc;AAGvBC,MAAAA,KAAK,EAAE,KAAKH,KAAL,CAAWG,KAAX,CAAiBO,IAAjB,CAAsBF,GAAtB;AAHgB,KAAd,CADjB,EAKQG,KALR,CAKcC,GAAG,IAAId,OAAO,CAACC,GAAR,CAAYa,GAAZ,CALrB;AAMH;;AAeDN,EAAAA,WAAW,GAAG;AACV,SAAKG,QAAL,CAAc;AACVR,MAAAA,IAAI,EAAE,CADI;AAEVC,MAAAA,OAAO,EAAE,KAFC;AAGVC,MAAAA,KAAK,EAAE;AAHG,KAAd;AAKH;;AAEDU,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,8BACI;AAAQ,QAAA,OAAO,EAAE,KAAKT,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,QAAA,OAAO,EAAE,KAAKE,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA,kBAAK,KAAKN,KAAL,CAAWG;AAAhB;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;;AAnD6B;;AAsDlC,eAAelB,SAAf","sourcesContent":["import React, {Component} from 'react';\n\n/**\n * This component handles the drawing a new card. It is responsible which step the user is on\n * As well as checking if their guess was correct.\n *\n * @param drawCard\n * @returns {JSX.Element}\n * @constructor\n */\nclass FetchCard extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            step: 0,\n            loading: true,\n            cards: []\n        }\n        this.handleDraw = this.handleDraw.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n    }\n\n    handleDraw() {\n        console.log(\"Drawing Card\")\n        this.fetchCard()\n            .then(res => this.setState({\n                step: this.state.step + 1,\n                loading: false,\n                cards: this.state.cards.push(res)\n            })).catch(err => console.log(err))\n    }\n    fetchCard = async () => {\n        const url = `https://deckofcardsapi.com/api/deck/${this.props.deckId}/draw?count=1`\n        const response = await fetch(url)\n        const body = await response.json()\n\n        if (response.status !== 200) {\n            throw Error(body.message)\n        }\n\n        /** Logs the response */\n        console.log(body)\n        return body;\n    }\n\n    handleReset() {\n        this.setState({\n            step: 0,\n            loading: false,\n            cards: []\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={this.handleDraw}>Draw</button>\n                <button onClick={this.handleReset}>Reset</button>\n                <h3>{this.state.cards}</h3>\n            </div>\n        );\n    }\n}\n\nexport default FetchCard;\n"]},"metadata":{},"sourceType":"module"}